{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar punycode = require('punycode');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n} // Reference: RFC 3986, RFC 1808, RFC 2396\n// define these here so at least they only have to be\n// compiled once on the first module load.\n\n\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n    // RFC 2396: characters reserved for delimiting URLs.\n// We actually just auto-escape these.\ndelims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n    // RFC 2396: characters not allowed for various reasons.\nunwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\nautoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n// Note that any invalid chars are also handled, but these\n// are the ones that are *expected* to be seen, so we fast-path\n// them.\nnonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\nunsafeProtocol = {\n  'javascript': true,\n  'javascript:': true\n},\n    // protocols that never have a hostname.\nhostlessProtocol = {\n  'javascript': true,\n  'javascript:': true\n},\n    // protocols that always contain a // bit.\nslashedProtocol = {\n  'http': true,\n  'https': true,\n  'ftp': true,\n  'gopher': true,\n  'file': true,\n  'http:': true,\n  'https:': true,\n  'ftp:': true,\n  'gopher:': true,\n  'file:': true\n},\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && isObject(url) && url instanceof Url) return url;\n  var u = new Url();\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\n  if (!isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  var rest = url; // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n\n  rest = rest.trim();\n  var proto = protocolPattern.exec(rest);\n\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  } // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n\n\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n    } // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n\n\n    var auth, atSign;\n\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    } // Now we have a portion which is definitely the auth.\n    // Pull that off.\n\n\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    } // the host is the remaining to the left of the first non-host char\n\n\n    hostEnd = -1;\n\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n    } // if we still have not hit it, then the entire thing is a host.\n\n\n    if (hostEnd === -1) hostEnd = rest.length;\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd); // pull out port.\n\n    this.parseHost(); // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n\n    this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n\n    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.\n\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          } // we test again with ASCII char only\n\n\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a puny coded representation of \"domain\".\n      // It only converts the part of the domain name that\n      // has non ASCII characters. I.e. it dosent matter if\n      // you call it with a domain that already is in ASCII.\n      var domainArray = this.hostname.split('.');\n      var newOut = [];\n\n      for (var i = 0; i < domainArray.length; ++i) {\n        var s = domainArray[i];\n        newOut.push(s.match(/[^A-Za-z0-9_-]/) ? 'xn--' + punycode.encode(s) : s);\n      }\n\n      this.hostname = newOut.join('.');\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host; // strip [ and ] from the hostname\n    // the host field still retains them, though\n\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  } // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n\n\n  if (!unsafeProtocol[lowerProto]) {\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      var esc = encodeURIComponent(ae);\n\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n\n      rest = rest.split(ae).join(esc);\n    }\n  } // chop off from the tail first.\n\n\n  var hash = rest.indexOf('#');\n\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n\n  var qm = rest.indexOf('?');\n\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n\n  if (rest) this.pathname = rest;\n\n  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n    this.pathname = '/';\n  } //to support http.request\n\n\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  } // finally, reconstruct the href based on what has been validated.\n\n\n  this.href = this.format();\n  return this;\n}; // format a parsed object into a url string\n\n\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function () {\n  var auth = this.auth || '';\n\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');\n\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query && isObject(this.query) && Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || query && '?' + query || '';\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n\n  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n  pathname = pathname.replace(/[?#]/g, function (match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function (relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function (relative) {\n  if (isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  Object.keys(this).forEach(function (k) {\n    result[k] = this[k];\n  }, this); // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n\n  result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.\n\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  } // hrefs like //foo/bar always cut to the protocol.\n\n\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    Object.keys(relative).forEach(function (k) {\n      if (k !== 'protocol') result[k] = relative[k];\n    }); //urlParse appends trailing / to urls like http://www.example.com\n\n    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      Object.keys(relative).forEach(function (k) {\n        result[k] = relative[k];\n      });\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n\n      while (relPath.length && !(relative.host = relPath.shift()));\n\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port; // to support http.request\n\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',\n      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',\n      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol]; // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);\n    }\n\n    result.host = '';\n\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);\n      }\n\n      relative.host = null;\n    }\n\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = relative.host || relative.host === '' ? relative.host : result.host;\n    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath; // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host\n      //this especialy happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n\n      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n\n    result.search = relative.search;\n    result.query = relative.query; //to support http.request\n\n    if (!isNull(result.pathname) || !isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null; //to support http.request\n\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n\n    result.href = result.format();\n    return result;\n  } // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n\n\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (result.host || relative.host) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n\n  var up = 0;\n\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n\n    if (last == '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  } // if the path is allowed to go above the root, restore leading ..s\n\n\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back\n\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host\n    //this especialy happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n\n    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || result.host && srcPath.length;\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  } //to support request.http\n\n\n  if (!isNull(result.pathname) || !isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n  }\n\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function () {\n  var host = this.host;\n  var port = portPattern.exec(host);\n\n  if (port) {\n    port = port[0];\n\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n\n    host = host.substr(0, host.length - port.length);\n  }\n\n  if (host) this.hostname = host;\n};\n\nfunction isString(arg) {\n  return typeof arg === \"string\";\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isNull(arg) {\n  return arg === null;\n}\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}","map":{"version":3,"names":["punycode","require","exports","parse","urlParse","resolve","urlResolve","resolveObject","urlResolveObject","format","urlFormat","Url","protocol","slashes","auth","host","port","hostname","hash","search","query","pathname","path","href","protocolPattern","portPattern","delims","unwise","concat","autoEscape","nonHostChars","hostEndingChars","hostnameMaxLen","hostnamePartPattern","hostnamePartStart","unsafeProtocol","hostlessProtocol","slashedProtocol","querystring","url","parseQueryString","slashesDenoteHost","isObject","u","prototype","isString","TypeError","rest","trim","proto","exec","lowerProto","toLowerCase","substr","length","match","hostEnd","i","hec","indexOf","atSign","lastIndexOf","slice","decodeURIComponent","parseHost","ipv6Hostname","hostparts","split","l","part","newpart","j","k","charCodeAt","validParts","notHost","bit","push","unshift","join","domainArray","newOut","s","encode","p","h","ae","esc","encodeURIComponent","escape","qm","obj","call","replace","Object","keys","stringify","charAt","source","relative","rel","result","forEach","relPath","shift","isSourceAbs","isRelAbs","mustEndAbs","removeAllDots","srcPath","psychotic","pop","isNullOrUndefined","authInHost","isNull","last","hasTrailingSlash","up","splice","isAbsolute","arg"],"sources":["/home/yair/Desktop/Programming/what i delete form project/node_modules/url/url.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar punycode = require('punycode');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a puny coded representation of \"domain\".\n      // It only converts the part of the domain name that\n      // has non ASCII characters. I.e. it dosent matter if\n      // you call it with a domain that already is in ASCII.\n      var domainArray = this.hostname.split('.');\n      var newOut = [];\n      for (var i = 0; i < domainArray.length; ++i) {\n        var s = domainArray[i];\n        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?\n            'xn--' + punycode.encode(s) : s);\n      }\n      this.hostname = newOut.join('.');\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  Object.keys(this).forEach(function(k) {\n    result[k] = this[k];\n  }, this);\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    Object.keys(relative).forEach(function(k) {\n      if (k !== 'protocol')\n        result[k] = relative[k];\n    });\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      Object.keys(relative).forEach(function(k) {\n        result[k] = relative[k];\n      });\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especialy happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!isNull(result.pathname) || !isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host) && (last === '.' || last === '..') ||\n      last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last == '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especialy happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!isNull(result.pathname) || !isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n\nfunction isString(arg) {\n  return typeof arg === \"string\";\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isNull(arg) {\n  return arg === null;\n}\nfunction isNullOrUndefined(arg) {\n  return  arg == null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}