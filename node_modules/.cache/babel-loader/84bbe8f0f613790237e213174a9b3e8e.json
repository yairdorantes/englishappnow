{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng; // Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\n\nvar getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && typeof msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","rng","getRandomValues","crypto","bind","msCrypto","rnds8","Uint8Array","Error"],"sources":["/home/yair/Escritorio/english/node_modules/uuid/dist/rng-browser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && typeof msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,GAAlB,C,CACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,eAAe,GAAG,OAAOC,MAAP,IAAiB,WAAjB,IAAgCA,MAAM,CAACD,eAAvC,IAA0DC,MAAM,CAACD,eAAP,CAAuBE,IAAvB,CAA4BD,MAA5B,CAA1D,IAAiG,OAAOE,QAAP,IAAmB,WAAnB,IAAkC,OAAOA,QAAQ,CAACH,eAAhB,IAAmC,UAArE,IAAmFG,QAAQ,CAACH,eAAT,CAAyBE,IAAzB,CAA8BC,QAA9B,CAA1M;AACA,IAAIC,KAAK,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAZ,C,CAAgC;;AAEhC,SAASN,GAAT,GAAe;EACb,IAAI,CAACC,eAAL,EAAsB;IACpB,MAAM,IAAIM,KAAJ,CAAU,0GAAV,CAAN;EACD;;EAED,OAAON,eAAe,CAACI,KAAD,CAAtB;AACD"},"metadata":{},"sourceType":"script"}